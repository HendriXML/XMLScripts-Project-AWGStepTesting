<?xml version="1.0" encoding="utf-8" standalone="no"?>
<pkg:Program
  xsi:schemaLocation="urn:schemas-www-wisware.nl-scriptingpackages ../XmlSchemas.Common.XmlScript/XMLScripting.Packages.xsd"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:pkg="urn:schemas-www-wisware.nl-scriptingpackages"
  xmlns:sys="urn:schemas-www-wisware.nl-xmlscripting"
  xmlns:ado="urn:schemas-www-wisware.nl-xmlscripting-ado"
  xmlns:fil="urn:schemas-www-wisware.nl-xmlscripting-filemanagement"
  xmlns:fwl="urn:schemas-www-wisware.nl-xmlscripting-windowsfirewall"
  xmlns:inx="urn:schemas-www-wisware.nl-xmlscripting-index"
  xmlns:lil="urn:schemas-www-wisware.nl-xmlscripting-linkedlist"
  xmlns:msx="urn:schemas-www-wisware.nl-xmlscripting-xml"
  xmlns:reg="urn:schemas-www-wisware.nl-xmlscripting-registry"
  xmlns:rep="urn:schemas-www-wisware.nl-xmlscripting-report"
  xmlns:sts="urn:schemas-www-wisware.nl-xmlscripting-showstatus"
  xmlns:syu="urn:schemas-www-wisware.nl-xmlscripting-sysutils"
  xmlns:stm="urn:schemas-www-wisware.nl-xmlscripting-statemanagement">
  >
  <pkg:ReportTargets>
    <pkg:Target Identifier="Default"/>
    <pkg:Target Identifier="Output"/>
  </pkg:ReportTargets>

  <Imports>
    <Import Identifier="VISAInstrument" Filename="..\Script.Common.VISA\VISA Instrument.xml"/>
    <Import Identifier="SiglentSDS1104X" Filename="..\Script.Common.VISA\VISA Siglent SDS1104X.xml"/>
    <Import Identifier="SampleProcessing" Filename="..\Script.Common.VISA\SampleProcessing.xml"/>
  </Imports>

  <Uses>
    <Use Identifier="VISAInstrument"/>
    <Use Identifier="SiglentSDS1104X"/>
    <Use Identifier="SampleProcessing"/>
  </Uses>

  <Type>
    <Enumeration Identifier="TStartEndSignalKind" Elements="Minimum, Maximum"/>
  </Type>

  <Constants>
    <Constant Identifier="Milli" Type="Extended" Expression="0.001"/>
    <Constant Identifier="Micro" Type="Extended" Expression="0.000001"/>
    <Constant Identifier="Nano" Type="Extended" Expression="0.000000001"/>
  </Constants>

  <Procedures>
    <Procedure Identifier="Execute">

      <Constants>
        <!-- DeviceName: change ip adress -->
        <Constant Identifier="DeviceName" Type="string" Expression="'TCPIP0::192.168.2.73::inst0::INSTR'"/>
        <!-- voltStartOffset: set this to the value to get the first batch in view, the other ones will be auto offsetted -->
        <Constant Identifier="AwgAmplitude" Type="Extended" Expression="3.0"/>
        <Constant Identifier="AwgFreq" Type="Extended" Expression="300"/>
        <Constant Identifier="AwgPeriod" Type="Extended" Expression="1/AwgFreq"/>
        <Constant Identifier="AwgOffset" Type="Extended" Expression="0.0"/>
        <Constant Identifier="WaveSCPICommand" Type="string" Expression="Format('C1:BSWV WVTP,ARB,FRQ,%s,AMP,%s,OFST,%s', FloatToCode(AwgFreq), FloatToCode(AwgAmplitude), FloatToCode(AwgOffset))"/>
        <Constant Identifier="voltStartOffset" Type="Extended" Expression="50 * milli"/>
        <Constant Identifier="BlockCount" Type="Int32" Expression="500"/>
        <!-- How much valid centre values in center: 2 x CenterOffset + CenterSample -->
        <Constant Identifier="CenterOffset" Type="Int32" Expression="59 - 9"/>
        <Constant Identifier="HasCenterSample" Type="Boolean" Expression="False"/>
        <Constant Identifier="AwgOutputChannel" Type="TChannelType" Expression="TChannelType.CH1"/>
        <Constant Identifier="AwgTrace" Type="TTraceType" Expression="TTraceType.CH1"/>
        <Constant Identifier="TriggerChannel" Type="TChannelType" Expression="TChannelType.CH3"/>
        <Constant Identifier="Triggertrace" Type="TTraceType" Expression="TTraceType.CH3"/>
        <Constant Identifier="WaveName" Type="string" Expression="'RampBatch'"/>
        <Constant Identifier="sDT" Type="string" Expression="'[yyyy/mm/dd hh:mm:ss]'"/>
        <Constant Identifier="SegmentCount" Type="Int32" Expression="378"/>
        <Constant Identifier="CheckMinValue" Type="Int32" Expression="AwgMinValue"/>
        <Constant Identifier="CheckMaxValue" Type="Int32" Expression="AwgMaxValue"/>
        <Constant Identifier="AwgFixedSamples" Type="Int32" Expression="16384"/>
        <Constant Identifier="AwgLSBStep" Type="Extended" Expression="AwgAmplitude / 65536"/>
        <Constant Identifier="AwgOutputChannelVDiv" Type="Extended" Expression="5 * milli"/>
        <Constant Identifier="AwgOutputChannelVWindow" Type="Extended" Expression="AwgOutputChannelVDiv * 8 * 256 / 200"/>
      </Constants>

      <Variables>
        <Variable Identifier="SDS1104X" Type="TSiglentSDS1104X"/>
      </Variables>
      <Procedures>

        <Function Identifier="GetVisaSession" Type="IVisaSession">
          <Parameters>
            <Parameter Identifier="DeviceName" Type="string"/>
          </Parameters>
          <Block>
            <Execute Statement="Result:= IntNil"/>
            <Variable Identifier="ResourceManager" Type="IResourceManager3" Init="CoResourceManager.Create"/>
            <Variable Identifier="Description"/>
            <Execute Statement="OleCheck(ResourceManager.Get_Description(Description))"/>

            <rep:Reporter.Information Text="Format('Description: %s', Description)"/>
            <Variable Identifier="RetValue"/>
            <RepeatUntilLoop Expression="Assigned(Result)">
              <Execute Statement="RetValue:= ResourceManager.Open(DeviceName, TAccessMode.NO_LOCK, 0, '', Result)"/>
              <rep:Reporter.Information Text="Format('RetValue: %d', RetValue)" Condition="IsDebugging"/>
              <ExitOnAbortRequest/>
            </RepeatUntilLoop>
          </Block>
        </Function>

        <Procedure Identifier="Setup">
          <Block>
            <rep:Reporter.Information Text="SDS1104X.IDN"/>
            <Execute Statement="SDS1104X.CommHeader:= THeaderType.Off"/>
            <Execute Statement="SDS1104X.TriggerMode:= TTriggerMode.Normal"/>
            <Execute Statement="SDS1104X.TDiv:= 500*micro"/>
            <Execute Statement="SDS1104X.VDiv[AwgOutputChannel]:= AwgOutputChannelVDiv"/>
            <Execute Statement="SDS1104X.VDiv[TriggerChannel]:= 1"/>
            <Execute Statement="SDS1104X.VOffset[TriggerChannel]:= -2.5"/>
            <Execute Statement="SDS1104X.MemorySize:= TMemSize.ms140K"/>
            <Execute Statement="SDS1104X.SetTrigger(Triggertrace, 2.5)"/>
            <Execute Statement="SDS1104X.TriggerDelay:= -cHGran * SDS1104X.TDiv - 260 * Nano"/>
            <Execute Statement="SDS1104X.RawWrite('C1:OUTP ON')"/>
            <Execute Statement="SDS1104X.RawWrite('C1:SYNC ON')"/>
            <Execute Statement="SDS1104X.SegmentCount:= SegmentCount"/>
            <Execute Statement="SDS1104X.SequenceMode:= True"/>
          </Block>
        </Procedure>

        <Procedure Identifier="SetupWave">
          <Parameters>
            <Parameter Identifier="StartValue" Type="Int32"/>
            <Parameter Identifier="EndValue" Type="Int32"/>
            <Parameter Identifier="BlockCount" Type="UInt32"/>
          </Parameters>
          <Block>
            <Variable Identifier="SamplesPerBlock" Type="UInt32" Init="AwgFixedSamples div BlockCount"/>
            <Variable Identifier="SamplesPerBlockRemainder" Type="UInt32" Init="AwgFixedSamples mod BlockCount"/>
            <Variable Identifier="CurSamplesInBlock" Type="UInt32"/>
            <Variable Identifier="RunningRemainder" Type="UInt32" Init="BlockCount div 2"/>
            <Object.Use Identifier="Memstream" Type="TMemorystream" Expression="TMemorystream.Create">
              <Execute Statement="Memstream.WriteDataAnsiString('C1:WVDT WVNM,' + WaveName + ',TYPE,5,LENGTH,32768B,FREQ,300,AMPL,6,OFST,0,PHASE,0.000000000,WAVEDATA,')"/>
              <Variable Identifier="SampleCountLeft" Type="Int32" Init="AwgFixedSamples"/>

              <ForLoop Indexer="Ib" From="0" To="BlockCount - 1" >
                <Execute Statement="RunningRemainder:= RunningRemainder + SamplesPerBlockRemainder"/>
                <Execute Statement="CurSamplesInBlock:= SamplesPerBlock + RunningRemainder div BlockCount"/>
                <Execute Statement="RunningRemainder:= RunningRemainder mod BlockCount"/>
                <rep:Reporter.Information Text="Format('%d x %d', CurSamplesInBlock, StartValue)" Condition="IsVerbose"/>
                <ForLoop Indexer="Is" From="0" To="CurSamplesInBlock - 1" >
                  <Execute Statement="Memstream.WriteDataInt16(StartValue)"/>
                  <Execute Statement="SampleCountLeft:= SampleCountLeft - 1"/>
                </ForLoop>
                <Execute Statement="StartValue:= StartValue + 1" Condition="StartValue &lt; EndValue"/>
              </ForLoop>

              <Raise Expression="Exception.Create(Format('SampleCountLeft: %d', SampleCountLeft))" Condition="SampleCountLeft &lt;&gt; 0"/>
              <Variable Identifier="Command" Init="CreateSafeArrayFromStream(Memstream)"/>
              <TryFinally>
                <Try>
                  <Variable Identifier="RetCount"/>
                  <Execute Statement="OleCheck(SDS1104X.Message.Write(Command, Memstream.Size, RetCount))"/>
                  <Execute Statement="SDS1104X.RawWrite('C1:ARWV NAME, ' + WaveName)"/>
                  <Execute Statement="SDS1104X.RawWrite(WaveSCPICommand)"/>
                </Try>
                <Finally>
                  <Execute Statement="OleCheck(SafeArrayDestroy(Command))"/>
                </Finally>
              </TryFinally>
            </Object.Use>
          </Block>
        </Procedure>

        <Procedure Identifier="SetupDSOWindow">
          <Parameters>
            <Parameter Identifier="voltVerticalCenter" Type="Extended"/>
          </Parameters>
          <Block>
            <Execute Statement="SDS1104X.VOffset[AwgOutputChannel]:= -voltVerticalCenter"/>
          </Block>
        </Procedure>

        <Function Identifier="GetDSOSamples" Type="TRawSampleCollection">
          <Parameters>
            <Parameter Identifier="Options" Type="TSummedFrameSamplesOptions"/>
          </Parameters>
          <Block>
            <Variable Identifier="StatusFlags" Type="UInt32" Init="SDS1104X.ClearStatusFlags"/>
            <Execute Statement="SDS1104X.Arm"/>
            <RepeatUntilLoop Expression="(StatusFlags and TStatusFlags.TriggerIsRready) = 0">
              <Suspend>
                <!--nanosec: 10sec-->
                <Resume.BreakRequest IssueExit="True"/>
                <Resume.Timed Duration="10000000"/>
              </Suspend>
              <Execute Statement="StatusFlags:= SDS1104X.ClearStatusFlags"/>
              <rep:Reporter.Information Text="Format('StatusFlags: %d', StatusFlags)" Condition="IsVerbose"/>
            </RepeatUntilLoop>

            <Execute Statement="SDS1104X.HistoryMode:= True"/>
            <rep:Reporter.Information Text="'HistoryMode aan'" Condition="IsVerbose"/>
            <Variable Identifier="FrameHighIndex" Type="Int64" Init="SDS1104X.ActiveFrame"/>
            <rep:Reporter.Information Text="Format('FrameMaxIndex: %d', FrameHighIndex)" Condition="IsVerbose"/>
            <Execute Statement="Result:= SDS1104X.GetSummedFrameSamples(AwgTrace, FrameHighIndex, Options)"/>
          </Block>
        </Function>

        <Procedure Identifier="ProcessSingleCycleSamples">
          <Parameters>
            <Parameter Identifier="Samples" Type="TRawSampleCollection"/>
            <Parameter Identifier="BlockCount" Type="UInt32"/>
            <Parameter Identifier="StartInputValue" Type="Int32"/>
            <Parameter Identifier="EndInputValue" Type="Int32"/>
            <Parameter Identifier="CenterOffset" Type="Integer"/>
            <Parameter Identifier="HasCenterSample" Type="Boolean"/>
            <Parameter Identifier="OffCentreVoltage" Type="Extended" Direction="Output"/>
          </Parameters>
          <Block>
            <Variable Identifier="TotalSumCount" Type="Int32" Init="0"/>
            <Variable Identifier="TotalSum" Type="Int64" Init="0"/>
            <Variable Identifier="ValueSum" Type="Int64"/>
            <Variable Identifier="Value" Type="Extended"/>
            <Variable Identifier="PrevValue" Type="Extended"/>
            <Variable Identifier="BlockCountX2" Type="Int32" Init="BlockCount * 2"/>
            <Variable Identifier="BlockSamplesLeft" Type="Int32"/>
            <Variable Identifier="ValidRangeCount" Type="Int32"/>
            <Variable Identifier="CentreCount" Type="Int32"/>
            <Variable Identifier="SamplesPerBlock" Type="Int32"/>
            <Variable Identifier="SamplesPerBlockRemainder" Type="Int32"/>
            <Variable Identifier="Start" Type="Int32" Init="(Samples.Count + 1) div 4"/>
            <Variable Identifier="Count" Type="Int32" Init="Samples.Count - (2 * Start)"/>
            <Variable Identifier="VOffset" Type="Extended" Init="Samples.VOffset"/>
            <Variable Identifier="HasPrev" Type="Boolean" Init="False"/>
            <Choose>
              <When Expression="HasCenterSample">
                <rep:Reporter.Information Text="Format('Samples to divide: %d', Samples.SamplePointManager.Count - BlockCount)"/>
                <Execute Statement="SamplesPerBlock:= (Samples.SamplePointManager.Count - BlockCount) div BlockCountX2"/>
                <Execute Statement="SamplesPerBlockRemainder:= (Samples.SamplePointManager.Count - BlockCount) mod BlockCountX2"/>
                <Execute Statement="CentreCount:= CenterOffset * 2 + 1"/>
              </When>
              <Otherwise>
                <rep:Reporter.Information Text="Format('Samples to divide: %d', Samples.SamplePointManager.Count - BlockCount)"/>
                <Execute Statement="SamplesPerBlock:= Samples.SamplePointManager.Count div BlockCountX2"/>
                <Execute Statement="SamplesPerBlockRemainder:= Samples.SamplePointManager.Count mod BlockCountX2"/>
                <Execute Statement="CentreCount:= CenterOffset * 2"/>
              </Otherwise>
            </Choose>
            <Variable Identifier="VFactor" Type="Extended" Init="Samples.VFactor / (Count * CentreCount)"/>
            <rep:Reporter.Information Text="Format('SamplesPerBlock: %d', SamplesPerBlock)"/>
            <rep:Reporter.Information Text="Format('SamplesPerBlockRemainder: %d', SamplesPerBlockRemainder)"/>
            <Variable Identifier="RunningRemainder" Type="Int32" Init="SamplesPerBlockRemainder div 2"/>
            <stm:StateHandler InitialState="BlockA" Name="BlockState">
              <lil:LinkedList.Iterate Head="Samples.SamplePointManager.SampleHead" ItemType="TSamplePoint" RunningItem="Item" Next="Item.Next">
                <stm:HandleStates>
                  <stm:State Name="BlockA">
                    <Execute Statement="ValueSum:= 0"/>
                    <Execute Statement="RunningRemainder:= RunningRemainder + SamplesPerBlockRemainder"/>
                    <Execute Statement="BlockSamplesLeft:= (SamplesPerBlock + RunningRemainder div BlockCountX2) - CenterOffset - 1"/>
                    <Execute Statement="RunningRemainder:= RunningRemainder mod BlockCountX2"/>
                    <stm:SetState Name="BlockB"/>
                  </stm:State>
                  <stm:State Name="BlockB">
                    <Execute Statement="BlockSamplesLeft:= BlockSamplesLeft - 1"/>
                    <Block Condition="BlockSamplesLeft = 0">
                      <stm:SetState Name="BlockC"/>
                      <Execute Statement="BlockSamplesLeft:= CentreCount"/>
                    </Block>
                  </stm:State>
                  <stm:State Name="BlockC">
                    <Execute Statement="ValueSum:= ValueSum + Item.GetSum(Start, Count)"/>
                    <Execute Statement="TotalSum:= TotalSum + ValueSum"/>
                    <Execute Statement="TotalSumCount:= TotalSumCount + 1"/>
                    <Execute Statement="BlockSamplesLeft:= BlockSamplesLeft - 1"/>
                    <Block Condition="BlockSamplesLeft = 0">
                      <Execute Statement="Value:= VFactor * ValueSum"/>
                      <rep:Reporter.Information Text="Format('%d'#9'%d'#9'%e'#9'%e'#9'%e', StartInputValue-1, ValueSum, VOffset + PrevValue, VOffset + Value, Value - PrevValue)"  Target="Output" Condition="HasPrev"/>
                      <Execute Statement="PrevValue:= Value"/>
                      <Execute Statement="HasPrev:= True"/>
                      <Execute Statement="StartInputValue:= StartInputValue + 1"/>
                      <Block Condition="StartInputValue &gt; EndInputValue">
                        <Execute Statement="OffCentreVoltage:= TotalSum * VFactor / TotalSumCount"/>
                        <Exit/>
                      </Block>
                      <stm:SetState Name="BlockD"/>
                      <Execute Statement="RunningRemainder:= RunningRemainder + SamplesPerBlockRemainder"/>
                      <Execute Statement="BlockSamplesLeft:= (SamplesPerBlock + RunningRemainder div BlockCountX2) - CenterOffset"/>
                      <Execute Statement="RunningRemainder:= RunningRemainder mod BlockCountX2"/>
                    </Block>
                  </stm:State>
                  <stm:State Name="BlockD">
                    <Execute Statement="BlockSamplesLeft:= BlockSamplesLeft - 1"/>
                    <stm:SetState Name="BlockA" Condition="BlockSamplesLeft = 0"/>
                  </stm:State>
                </stm:HandleStates>
              </lil:LinkedList.Iterate>
            </stm:StateHandler>
            <Raise Expression="Exception.Create(Format('Invalid, stopped by value %d', StartInputValue))"/>
          </Block>
        </Procedure>
      </Procedures>

      <Block>
        <Variable Identifier="VisaSession" Type="IVisaSession" Init="GetVisaSession(DeviceName)"/>
        <ExitOnAbortRequest/>

        <Object.Use Identifier="SDS1104X" Type="TSiglentSDS1104X" Expression="TSiglentSDS1104X.Create(VisaSession)" LocalVariable="false">
          <Object.Use Identifier="SummedFrameSamplesOptions" Type="TSummedFrameSamplesOptions" Expression="TSummedFrameSamplesOptions.Create">
            <Execute Statement="Setup"/>

            <Variable Identifier="voltVerticalCenter" Type="Extended"/>
            <Variable Identifier="voltOffset" Type="Extended" Init="voltStartOffset"/>
            <Variable Identifier="voltDiff" Type="Extended"/>
            <Variable Identifier="BatchStartValue" Type="Int32" Init="CheckMinValue"/>
            <Variable Identifier="BatchEndValue" Type="Int32"/>
            <Variable Identifier="DSOSamples" Type="TRawSampleCollection"/>

            <rep:Reporter.Information Text="'InputValue'#9'Sum'#9'OutputValue'#9'SucceedingOutputValue'#9'Difference'"  Target="Output"/>
            <WhileLoop Expression="BatchStartValue &lt; CheckMaxValue">
              <Pause Condition="PauseRequest" ExitCondition="AbortRequest"/>
              <Execute Statement="BatchEndValue:= BatchStartValue + BlockCount - 1"/>
              <Execute Statement="BatchEndValue:= CheckMaxValue" Condition="BatchEndValue &gt; CheckMaxValue"/>

              <rep:Reporter.Information Text="Format('%s Setting up wave %d..%d', FormatDateTime(sDT, Now), BatchStartValue, BatchEndValue)"/>
              <sts:ShowStatus.Information Text="Format('Setting up wave %d..%d', BatchStartValue, BatchEndValue)"/>
              <Execute Statement="SetupWave(BatchStartValue, BatchEndValue, BlockCount)"/>

              <Execute Statement="voltVerticalCenter:= AwgOffset + (BatchStartValue + BatchEndValue) * 0.5 * AwgLSBStep + voltOffset"/>
              <rep:Reporter.Information Text="Format('%s Setting up DSO Window, centered at %f mV', FormatDateTime(sDT, Now), voltVerticalCenter * 1000)"/>
              <sts:ShowStatus.Information Text="Format('Setting up DSO Window, centered at %f mV', voltVerticalCenter * 1000)"/>
              <Execute Statement="SetupDSOWindow(voltVerticalCenter)"/>

              <rep:Reporter.Information Text="Format('%s Getting DSO samples', FormatDateTime(sDT, Now))"/>
              <sts:ShowStatus.Information Text="Format('Getting DSO samples')"/>
              <rep:Reporter.Information Text="Format('SampleRate: %g', SDS1104X.SampleRate)" Condition="IsVerbose"/>
              <rep:Reporter.Information Text="Format('Samples: %g; AwgPeriod: %g, SampleRate: %g', AwgPeriod * SDS1104X.SampleRate, AwgPeriod, SDS1104X.SampleRate)" Condition="IsVerbose"/>
              <Execute Statement="SummedFrameSamplesOptions.LimitSamples:= Round(AwgPeriod * SDS1104X.SampleRate)"/>
              <Execute Statement="DSOSamples:= GetDSOSamples(SummedFrameSamplesOptions)"/>
              <TryFinally>
                <Try>
                  <ExitOnAbortRequest/>

                  <rep:Reporter.Information Text="Format('%s Process single cycle samples', FormatDateTime(sDT, Now))"/>
                  <sts:ShowStatus.Information Text="Format('Process single cycle samples')"/>
                  <Execute Statement="ProcessSingleCycleSamples(DSOSamples, BlockCount, BatchStartValue, BatchEndValue, CenterOffset, HasCenterSample, voltDiff)"/>
                  <rep:Reporter.Information Text="Format('%s Off centre voltage: %.2f mV', FormatDateTime(sDT, Now), voltDiff * 1000)"/>
                  <Execute Statement="voltOffset:= voltOffset + voltDiff"/>
                  <ExitOnAbortRequest/>
                </Try>
                <Finally>
                  <Execute Statement="SDS1104X.ReleaseSummedFrameSamples(DSOSamples)"/>
                </Finally>
              </TryFinally>
              <ExitOnAbortRequest/>
              <Execute Statement="BatchStartValue:= BatchEndValue"/>
            </WhileLoop>

            <sts:ShowStatus.Information Text="'Done!'"/>
          </Object.Use>
        </Object.Use>
      </Block>
    </Procedure>
  </Procedures>

  <Block>
    <Execute Statement="Execute"/>
  </Block>
</pkg:Program>